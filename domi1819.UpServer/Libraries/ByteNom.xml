<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ByteNom</name>
    </assembly>
    <members>
        <member name="T:ByteNom.Client">
            <summary>
                Provides a client connection to a ByteNom server.
            </summary>
        </member>
        <member name="T:ByteNom.TcpConnection">
            <summary>
            Represents a TcpConnection.
            </summary>
        </member>
        <member name="T:ByteNom.Connection">
            <summary>
                Represents the abstract base class for all ByteNom connections.
            </summary>
        </member>
        <member name="M:ByteNom.Connection.SetStream(System.IO.Stream)">
            <summary>
                Sets the internal stream for this connection.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:ByteNom.Connection.Start">
            <summary>
                Starts listening for messages.
            </summary>
        </member>
        <member name="M:ByteNom.Connection.Work">
            <summary>
                This method is run from the external thread of the connection. Override this to perform startup/shutdown tasks.
            </summary>
        </member>
        <member name="M:ByteNom.Connection.Send(System.String,System.Object[])">
            <summary>
                Creates and sends a message with the specified data.
            </summary>
            <param name="type">The message type.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:ByteNom.Connection.Send(ByteNom.Message)">
            <summary>
                Sends the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ByteNom.Connection.Disconnect">
            <summary>
                Disconnects from the server.
            </summary>
        </member>
        <member name="M:ByteNom.Connection.OnMessageReceived(ByteNom.Message)">
            <summary>
                Called when a message is received.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ByteNom.Connection.OnDisconnected">
            <summary>
                Called when the connection is lost.
            </summary>
        </member>
        <member name="M:ByteNom.Connection.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="P:ByteNom.Connection.Stream">
            <summary>
                Gets the network stream.
            </summary>
            <value>
                The network stream.
            </value>
        </member>
        <member name="E:ByteNom.Connection.MessageReceived">
            <summary>
                Occurs when a message is received.
            </summary>
        </member>
        <member name="E:ByteNom.Connection.Disconnected">
            <summary>
                Occurs when the connection is lost.
            </summary>
        </member>
        <member name="M:ByteNom.TcpConnection.SetClient(System.Net.Sockets.TcpClient)">
            <summary>
                Sets the internal tcp client for this connection.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:ByteNom.TcpConnection.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="P:ByteNom.TcpConnection.Connected">
            <summary>
                Gets a value indicating whether this <see cref="T:ByteNom.Connection"/> is connected.
            </summary>
            <value>
                <c>true</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ByteNom.TcpConnection.EndPoint">
            <summary>
                Gets the remote end point.
            </summary>
            <value>
                The remote end point.
            </value>
        </member>
        <member name="P:ByteNom.TcpConnection.Client">
            <summary>
                Gets the tcp client.
            </summary>
            <value>
                The tcp client.
            </value>
        </member>
        <member name="M:ByteNom.Client.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteNom.Client"/> class.
            </summary>
            <param name="hostname">The hostname used when connecting.</param>
            <param name="port">The port used when connecting.</param>
        </member>
        <member name="M:ByteNom.Client.Connect">
            <summary>
                Starts this instance and connects to the server.
            </summary>
        </member>
        <member name="T:ByteNom.ConnectionEventHandler">
            <summary>
                Provvides data for the <see cref="E:ByteNom.Server.ConnectionReceived"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:ByteNom.MessageEventHandler">
            <summary>
                Provides data for the <see cref="E:ByteNom.Connection.MessageReceived"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The received message.</param>
        </member>
        <member name="T:ByteNom.Message">
            <summary>
                The message class.
            </summary>
        </member>
        <member name="M:ByteNom.Message.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:ByteNom.Message"/> class.
            </summary>
        </member>
        <member name="M:ByteNom.Message.#ctor(System.String,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:ByteNom.Message"/> class.
            </summary>
            <param name="type">The message type.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:ByteNom.Message.Get``1(System.Int32)">
            <summary>
                Gets the argument at the specified index.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetBool(System.Int32)">
            <summary>
                Gets the bool at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetInt(System.Int32)">
            <summary>
                Gets the int at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetUInt(System.Int32)">
            <summary>
                Gets the uint at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetShort(System.Int32)">
            <summary>
                Gets the short at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetUShort(System.Int32)">
            <summary>
                Gets the ushort at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetLong(System.Int32)">
            <summary>
                Gets the long at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetULong(System.Int32)">
            <summary>
                Gets the ulong at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetByte(System.Int32)">
            <summary>
                Gets the byte at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetSByte(System.Int32)">
            <summary>
                Gets the sbyte at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetChar(System.Int32)">
            <summary>
                Gets the char at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetString(System.Int32)">
            <summary>
                Gets the string at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetDouble(System.Int32)">
            <summary>
                Gets the double at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetFloat(System.Int32)">
            <summary>
                Gets the float at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetDecimal(System.Int32)">
            <summary>
                Gets the decimal at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetDateTime(System.Int32)">
            <summary>
                Gets the DateTime at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:ByteNom.Message.GetMessage(System.Int32)">
            <summary>
                Gets the nested message at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:ByteNom.Message.Type">
            <summary>
                Gets or sets the message type.
            </summary>
            <value>
                The message type.
            </value>
        </member>
        <member name="T:ByteNom.MessageSerializer">
            <summary>
                Handles the Serialization of the messages.
            </summary>
        </member>
        <member name="M:ByteNom.MessageSerializer.RegisterType(System.Int32,System.Type)">
            <summary>
                Registers a type. Use this method before sending custom classes.
            </summary>
            <param name="tag">
                The tag. A number higher than 100 that identifies this type. Must be unique to this type and the same
                on both sides of the connection.
            </param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Tags under 100 are reserved!</exception>
        </member>
        <member name="T:ByteNom.Server">
            <summary>
                Listens for ByteNom clients.
            </summary>
        </member>
        <member name="M:ByteNom.Server.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteNom.Server"/> class using <see cref="F:System.Net.IPAddress.Any"/> as the ipAddress.
            </summary>
            <param name="port">The port to connect to.</param>
        </member>
        <member name="M:ByteNom.Server.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:ByteNom.Server"/> class.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:ByteNom.Server.System#IDisposable#Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:ByteNom.Server.Start">
            <summary>
                Starts listening to new connections.
            </summary>
            <exception cref="T:System.InvalidOperationException">The server has already been started!</exception>
        </member>
        <member name="M:ByteNom.Server.Stop">
            <summary>
                Stops listening to new connections.
            </summary>
        </member>
        <member name="M:ByteNom.Server.OnConnectionReceived(ByteNom.TcpConnection)">
            <summary>
                Called when a new connection is received.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:ByteNom.Server.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="P:ByteNom.Server.Connected">
            <summary>
                Gets a value indicating whether this <see cref="T:ByteNom.Server"/> is connected.
            </summary>
            <value>
                <c>true</c> if connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ByteNom.Server.Endpoint">
            <summary>
            Gets the local endpoint for this server.
            </summary>
        </member>
        <member name="E:ByteNom.Server.ConnectionReceived">
            <summary>
                Occurs when a new connection is received.
            </summary>
        </member>
    </members>
</doc>
